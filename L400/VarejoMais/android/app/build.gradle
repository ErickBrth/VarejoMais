def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.example.varejo_mais"
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.example.varejo_mais"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 22
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        android.buildTypes.debug.signingConfig = null
        android.buildTypes.release.signingConfig = null

        gpos700 {
            // Dev signature for GPOS700 terminals
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        l400 {

        }


    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            shrinkResources = false
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "model"

    productFlavors {
        gpos700 {
            dimension "model"
            versionNameSuffix '-Gpos700'
            applicationIdSuffix = ".gpos700"
            signingConfig signingConfigs.gpos700
//            sourceSets {
//                main {
//                    jniLibs.srcDirs = ['libs/sdk_3.0_release.aar']
//                }
//            }
        }

        l400 {
            dimension "model"
            minSdkVersion 22
            versionNameSuffix "-L400"
            applicationIdSuffix = ".l400"
            signingConfig signingConfigs.debug
//            sourceSets {
//                main {
//                    jniLibs.srcDirs = ['libs/smartrede-sdk-l400-4.0.6.release.aar']
//                }
//            }
        }
    }

    ext.configSigningKey = { android, signingConfigs ->
        def flavor = getGradle().getStartParameter().getTaskRequests().toString()
        if (flavor.contains("gpos700")) {
            android.buildTypes.debug.signingConfig signingConfigs.gpos700
            android.buildTypes.release.signingConfig signingConfigs.gpos700
        } else if (flavor.contains("l400")) {
            android.buildTypes.debug.signingConfig signingConfigs.l400
            android.buildTypes.release.signingConfig signingConfigs.l400
        }

//        println "Usando signingConfig $android.buildTypes.debug.signingConfig"
    }

    configSigningKey(android, signingConfigs)
}

flutter {
    source '../..'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies{
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation fileTree(dir: 'libs', include: ['*.aar'])
    gpos700Implementation fileTree(dir: 'libs/sdk3.0', include: ['*.jar', '*.aar'])
    l400Implementation fileTree(dir: 'libs/sdk4.0', include: ['*.jar', '*.aar'])

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.0'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.activity:activity-ktx:1.2.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.0'
}